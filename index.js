const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const axios = require('axios');
const crypto = require('crypto');

const app = express();
const PORT = process.env.PORT || 10000;

// === CONFIG ===
const SHOP = 'neko-chin-shop-5.myharavan.com';
const ACCESS_TOKEN = '8D69E2B91FDF0D073CAC0126CCA36B924276EB0DFF55C7F76097CFD8283920BE';
const MONGO_URI = process.env.MONGODB_URI || 'mongodb+srv://admin:admin1234@cluster0.edubkxs.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';
const REVIEW_BACKEND_URL = 'https://review-backend-dukv.onrender.com'; // <-- ƒê·∫£m b·∫£o ƒë√¢y l√† URL ch√≠nh x√°c c·ªßa Backend ƒê√°nh gi√° c·ªßa b·∫°n

// === MONGODB CONNECT ===
mongoose.connect(MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
    .then(() => console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB'))
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err.message));

// === MIDDLEWARE ===
app.use(cors());
app.use(express.json());

// === SCHEMA ===
const UserPointsSchema = new mongoose.Schema({
    phone: { type: String, unique: true },
    email: String,
    total_points: { type: Number, default: 0 },
    history: [
        {
            order_id: String,
            earned_points: Number,
            timestamp: Date,
            meta: Object
        }
    ],
    missions: [
        {
            mission_key: String,
            date: Date,
            points: Number
        }
    ]
});
const UserPoints = mongoose.model('UserPoints', UserPointsSchema);

// === MISSION LIST ===
const MissionList = [
    // --- Daily Missions ---
    {
        key: 'daily_login', type: 'daily', name: 'ƒêƒÉng nh·∫≠p m·ªói ng√†y',
        points: 300, limit_per_day: 1, check: async () => true // Lu√¥n ƒë·ªß ƒëi·ªÅu ki·ªán, quan tr·ªçng l√† ƒë√£ nh·∫≠n ch∆∞a
    },
    {
        key: 'share_fb', type: 'daily', name: 'Chia s·∫ª website l√™n Facebook',
        points: 500, limit_per_day: 1, check: async () => true // Lu√¥n ƒë·ªß ƒëi·ªÅu ki·ªán, quan tr·ªçng l√† ƒë√£ nh·∫≠n ch∆∞a
    },
    {
        key: 'review_product', type: 'daily', name: 'ƒê√°nh gi√° s·∫£n ph·∫©m ƒë√£ mua',
        points: 800, limit_per_day: 3, check: async () => true // Logic check ƒë∆∞·ª£c th·ª±c hi·ªán trong API /missions d·ª±a v√†o s·ªë review th·ª±c t·∫ø
    },
    // --- Monthly Milestone Missions ---
    {
        key: 'monthly_login_10', type: 'monthly', name: 'ƒêƒÉng nh·∫≠p 10 ng√†y trong th√°ng',
        points: 1000, limit_per_month: 1,
        check: async (user) => {
            const now = new Date();
            const missionsInMonth = (user.missions || []).filter(m =>
                m.mission_key === 'daily_login' &&
                new Date(m.date).getMonth() === now.getMonth() &&
                new Date(m.date).getFullYear() === now.getFullYear()
            );
            const uniqueDays = new Set(missionsInMonth.map(m => new Date(m.date).getDate()));
            return uniqueDays.size >= 10;
        }
    },
    {
        key: 'monthly_login_15', type: 'monthly', name: 'ƒêƒÉng nh·∫≠p 15 ng√†y trong th√°ng',
        points: 2000, limit_per_month: 1,
        check: async (user) => {
            const now = new Date();
            const missionsInMonth = (user.missions || []).filter(m =>
                m.mission_key === 'daily_login' &&
                new Date(m.date).getMonth() === now.getMonth() &&
                new Date(m.date).getFullYear() === now.getFullYear()
            );
            const uniqueDays = new Set(missionsInMonth.map(m => new Date(m.date).getDate()));
            return uniqueDays.size >= 15;
        }
    },
    {
        key: 'monthly_review_5', type: 'monthly', name: 'ƒê√°nh gi√° 5 s·∫£n ph·∫©m trong th√°ng',
        points: 1000, limit_per_month: 1,
        check: async (user) => {
            // Logic check n√†y s·∫Ω ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n actualReviewsMonthlyCount trong API /missions
            // v√† kh√¥ng c·∫ßn th·ª±c hi·ªán l·∫°i ·ªü ƒë√¢y
            return true;
        }
    }
];

// === API: L·∫§Y TR·∫†NG TH√ÅI NHI·ªÜM V·ª§ ===
app.get('/missions', async (req, res) => {
    const { phone } = req.query;
    if (!phone) return res.status(400).json({ error: 'Thi·∫øu s·ªë ƒëi·ªán tho·∫°i' });

    let user = await UserPoints.findOne({ phone });
    const isNewUser = !user;
    if (isNewUser) {
        user = { phone, missions: [], total_points: 0 };
    }

    const now = new Date();
    const todayStr = now.toLocaleDateString('vi-VN');

    const missionsInMonth = (user.missions || []).filter(m =>
        new Date(m.date).getMonth() === now.getMonth() &&
        new Date(m.date).getFullYear() === now.getFullYear()
    );

    const dailyLoginsInMonth = missionsInMonth.filter(m => m.mission_key === 'daily_login');
    const uniqueLoginDays = new Set(dailyLoginsInMonth.map(m => new Date(m.date).getDate())).size;

    // --- L·∫§Y S·ªê L∆Ø·ª¢NG ƒê√ÅNH GI√Å TH·ª∞C T·∫æ T·ª™ BACKEND ƒê√ÅNH GI√Å ---
    let actualReviewsTodayCount = 0;
    let actualReviewsMonthlyCount = 0;
    try {
        const reviewResponse = await axios.get(`${REVIEW_BACKEND_URL}/api/review/count?phone=${phone}`);
        if (reviewResponse.data) {
            actualReviewsTodayCount = reviewResponse.data.today || 0;
            actualReviewsMonthlyCount = reviewResponse.data.monthly || 0;
        }
    } catch (error) {
        console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng review t·ª´ Backend ƒê√°nh gi√°:', error.message);
    }
    // -----------------------------------------------------------

    const missionStates = await Promise.all(MissionList.map(async (mission) => {
        let claimed_count = 0; // S·ªë l·∫ßn ƒë√£ nh·∫≠n th∆∞·ªüng (ƒë√£ ƒë∆∞·ª£c ghi v√†o user.missions)
        let limit = 0; // Gi·ªõi h·∫°n s·ªë l·∫ßn c√≥ th·ªÉ nh·∫≠n th∆∞·ªüng
        let progress = 0; // Ti·∫øn ƒë·ªô hi·ªán t·∫°i c·ªßa nhi·ªám v·ª• (v√≠ d·ª•: 1)
        let progress_limit = 0; // Gi·ªõi h·∫°n ti·∫øn ƒë·ªô (v√≠ d·ª•: 3)
        let can_claim = false; // Flag ƒë·ªÉ frontend bi·∫øt c√≥ th·ªÉ nh·∫•n n√∫t "Nh·∫≠n th∆∞·ªüng" kh√¥ng

        if (mission.type === 'daily') {
            claimed_count = (user.missions || []).filter(m =>
                m.mission_key === mission.key &&
                new Date(m.date).toLocaleDateString('vi-VN') === todayStr
            ).length;
            limit = mission.limit_per_day || 1;

            if (mission.key === 'review_product') {
                progress = actualReviewsTodayCount;
                progress_limit = limit; // 3
                // can_claim: C√≥ th·ªÉ nh·∫≠n n·∫øu s·ªë review th·ª±c t·∫ø l·ªõn h∆°n s·ªë l·∫ßn ƒë√£ nh·∫≠n th∆∞·ªüng
                // V√Ä s·ªë l·∫ßn ƒë√£ nh·∫≠n th∆∞·ªüng ch∆∞a ƒë·∫°t gi·ªõi h·∫°n
                can_claim = (actualReviewsTodayCount > claimed_count) && (claimed_count < limit);
            } else { // ƒê·ªëi v·ªõi 'daily_login' v√† 'share_fb'
                progress = claimed_count;
                progress_limit = limit;
                // can_claim: C√≥ th·ªÉ nh·∫≠n n·∫øu ƒëi·ªÅu ki·ªán check c·ªßa nhi·ªám v·ª• l√† true V√Ä ch∆∞a nh·∫≠n th∆∞·ªüng ƒë·ªß gi·ªõi h·∫°n
                can_claim = (await mission.check(user)) && (claimed_count < limit);
            }

        } else if (mission.type === 'monthly') {
            claimed_count = missionsInMonth.filter(m => m.mission_key === mission.key).length;
            limit = mission.limit_per_month || 1; // Th∆∞·ªùng l√† 1 cho nhi·ªám v·ª• th√°ng

            if (mission.key.startsWith('monthly_login_')) {
                progress = uniqueLoginDays;
                progress_limit = parseInt(mission.key.split('_').pop()); // 10 ho·∫∑c 15
                // can_claim: C√≥ th·ªÉ nh·∫≠n n·∫øu ƒëi·ªÅu ki·ªán check c·ªßa nhi·ªám v·ª• l√† true V√Ä ch∆∞a nh·∫≠n th∆∞·ªüng ƒë·ªß gi·ªõi h·∫°n
                can_claim = (await mission.check(user)) && (claimed_count < limit);
            } else if (mission.key === 'monthly_review_5') {
                progress = actualReviewsMonthlyCount; // S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng review th·ª±c t·∫ø trong th√°ng
                progress_limit = parseInt(mission.key.split('_').pop()); // 5
                // can_claim: C√≥ th·ªÉ nh·∫≠n n·∫øu s·ªë review th·ª±c t·∫ø ƒë·∫°t ng∆∞·ª°ng V√Ä ch∆∞a nh·∫≠n th∆∞·ªüng ƒë·ªß gi·ªõi h·∫°n
                can_claim = (actualReviewsMonthlyCount >= progress_limit) && (claimed_count < limit);
            }
        }
        
        // X√°c ƒë·ªãnh tr·∫°ng th√°i cu·ªëi c√πng cho frontend
        let status_for_frontend = 'not_completed';
        if (claimed_count >= limit) {
            status_for_frontend = 'claimed'; // ƒê√£ nh·∫≠n th∆∞·ªüng h·∫øt s·ªë l·∫ßn cho ph√©p
        } else if (can_claim) {
            status_for_frontend = 'available_to_claim'; // ƒê·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ nh·∫•n n√∫t "Nh·∫≠n th∆∞·ªüng"
        }

        return {
            key: mission.key,
            name: mission.name,
            points: mission.points,
            type: mission.type,
            status: status_for_frontend, // 'claimed', 'available_to_claim', 'not_completed'
            can_claim: can_claim, // TRUE n·∫øu c√≥ th·ªÉ nh·∫•n n√∫t "Nh·∫≠n th∆∞·ªüng"
            is_claimed: claimed_count >= limit, // TRUE n·∫øu ƒë√£ nh·∫≠n th∆∞·ªüng h·∫øt gi·ªõi h·∫°n (cho nh·ªØng nhi·ªám v·ª• ch·ªâ 1 l·∫ßn)
            progress: progress,
            progress_limit: progress_limit
        };
    }));

    res.json(missionStates);
});

// === WEBHOOK: ƒê∆†N H√ÄNG HARAVAN ===
app.post('/webhook/order', async (req, res) => {
    try {
        console.log('üì¶ [Webhook] Nh·∫≠n d·ªØ li·ªáu t·ª´ Haravan:');
        console.dir(req.body, { depth: null });

        const order = req.body;
        const customer = order.customer || {};
        const billing = order.billing_address || {};
        const phone = customer.phone || billing.phone;
        const email = customer.email || 'Kh√¥ng c√≥ email';
        const order_id = order.id?.toString();
        const total = parseInt(order.total_price || 0);
        const points = Math.floor(total / 100);

        const paid = order.financial_status === 'paid';
        const fulfilled = ['fulfilled', 'delivered'].includes(order.fulfillment_status);

        if (!phone || !paid || !fulfilled) {
            console.log(`‚ö†Ô∏è B·ªè qua ƒë∆°n kh√¥ng h·ª£p l·ªá\nSƒêT: ${phone}\nThanh to√°n: ${order.financial_status}\nGiao h√†ng: ${order.fulfillment_status}`);
            return res.status(200).send('‚ùå B·ªè qua ƒë∆°n kh√¥ng h·ª£p l·ªá');
        }

        const user = await UserPoints.findOne({ phone });

        if (user) {
            const existed = user.history.find(h => h.order_id === order_id);
            if (!existed) {
                user.total_points += points;
                user.history.push({ order_id, earned_points: points, timestamp: new Date() });
                await user.save();
            }
        } else {
            await UserPoints.create({
                phone,
                email,
                total_points: points,
                history: [{ order_id, earned_points: points, timestamp: new Date() }]
            });
        }

        console.log(`‚úÖ C·ªông ${points} ƒëi·ªÉm cho: ${phone}`);
        res.status(200).send('ƒê√£ x·ª≠ l√Ω xong');
    } catch (err) {
        console.error('‚ùå Webhook l·ªói:', err.message);
        res.status(500).send('L·ªói webhook');
    }
});

// === API: TRA C·ª®U ƒêI·ªÇM ===
app.get('/points', async (req, res) => {
    const { phone } = req.query;
    if (!phone) return res.status(400).json({ error: 'Thi·∫øu s·ªë ƒëi·ªán tho·∫°i' });

    try {
        const user = await UserPoints.findOne({ phone });
        if (!user) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

        res.json({
            phone: user.phone,
            email: user.email,
            total_points: user.total_points,
            history: user.history || []
        });
    } catch (err) {
        console.error('‚ùå L·ªói tra ƒëi·ªÉm:', err.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ƒëi·ªÉm' });
    }
});

// === API: HO√ÄN TH√ÄNH NHI·ªÜM V·ª§ & C·ªòNG ƒêI·ªÇM ===
app.post('/missions/complete', async (req, res) => {
    const { phone, mission_key } = req.body;
    if (!phone || !mission_key) return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin' });

    const mission = MissionList.find(m => m.key === mission_key);
    if (!mission) return res.status(404).json({ error: 'Nhi·ªám v·ª• kh√¥ng t·ªìn t·∫°i' });

    let user = await UserPoints.findOne({ phone });
    if (!user) {
        user = await UserPoints.create({ phone, email: '', total_points: 0, history: [], missions: [] });
    }

    const now = new Date();
    const todayStr = now.toLocaleDateString('vi-VN');

    // Ki·ªÉm tra gi·ªõi h·∫°n ho√†n th√†nh nhi·ªám v·ª• theo lo·∫°i (daily/monthly)
    if (mission.type === 'daily') {
        const completed_count_today = (user.missions || []).filter(m =>
            m.mission_key === mission.key && new Date(m.date).toLocaleDateString('vi-VN') === todayStr
        ).length;

        if (completed_count_today >= (mission.limit_per_day || 1)) {
            return res.status(400).json({ error: `B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• "${mission.name}" h√¥m nay r·ªìi!` });
        }
    } else if (mission.type === 'monthly') {
        const completed_count_month = (user.missions || []).filter(m =>
            m.mission_key === mission.key &&
            new Date(m.date).getMonth() === now.getMonth() &&
            new Date(m.date).getFullYear() === now.getFullYear()
        ).length;

        if (completed_count_month >= (mission.limit_per_month || 1)) {
            return res.status(400).json({ error: `B·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng cho m·ªëc "${mission.name}" trong th√°ng n√†y r·ªìi!` });
        }
    }

    // --- B·ªï sung ki·ªÉm tra ƒëi·ªÅu ki·ªán cho 'review_product' v√† 'monthly_review_5' tr∆∞·ªõc khi c·ªông ƒëi·ªÉm ---
    // ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng th·ª±c s·ª± ƒë·ªß ƒëi·ªÅu ki·ªán
    if (mission.key === 'review_product') {
        // L·∫•y s·ªë l∆∞·ª£ng review th·ª±c t·∫ø t·ª´ Backend ƒê√°nh gi√°
        let actualReviewsTodayCount = 0;
        try {
            const reviewResponse = await axios.get(`${REVIEW_BACKEND_URL}/api/review/count?phone=${phone}`);
            if (reviewResponse.data) {
                actualReviewsTodayCount = reviewResponse.data.today || 0;
            }
        } catch (error) {
            console.error('L·ªói khi ki·ªÉm tra s·ªë l∆∞·ª£ng review th·ª±c t·∫ø cho nhi·ªám v·ª•:', error.message);
            return res.status(500).json({ error: 'L·ªói server khi ki·ªÉm tra ƒëi·ªÅu ki·ªán nhi·ªám v·ª•.' });
        }

        const claimed_count_today = (user.missions || []).filter(m =>
            m.mission_key === mission.key && new Date(m.date).toLocaleDateString('vi-VN') === todayStr
        ).length;

        if (actualReviewsTodayCount <= claimed_count_today) {
            return res.status(400).json({ error: 'B·∫°n ch∆∞a ho√†n th√†nh ƒë·ªß s·ªë l∆∞·ª£ng ƒë√°nh gi√° ƒë·ªÉ nh·∫≠n th∆∞·ªüng.' });
        }
    } else if (mission.key === 'monthly_review_5') {
        // L·∫•y s·ªë l∆∞·ª£ng review th·ª±c t·∫ø t·ª´ Backend ƒê√°nh gi√° cho th√°ng
        let actualReviewsMonthlyCount = 0;
        try {
            const reviewResponse = await axios.get(`${REVIEW_BACKEND_URL}/api/review/count?phone=${phone}`);
            if (reviewResponse.data) {
                actualReviewsMonthlyCount = reviewResponse.data.monthly || 0;
            }
        } catch (error) {
            console.error('L·ªói khi ki·ªÉm tra s·ªë l∆∞·ª£ng review th·ª±c t·∫ø cho nhi·ªám v·ª• th√°ng:', error.message);
            return res.status(500).json({ error: 'L·ªói server khi ki·ªÉm tra ƒëi·ªÅu ki·ªán nhi·ªám v·ª•.' });
        }

        const claimed_count_month = (user.missions || []).filter(m =>
            m.mission_key === mission.key &&
            new Date(m.date).getMonth() === now.getMonth() &&
            new Date(m.date).getFullYear() === now.getFullYear()
        ).length;

        if (actualReviewsMonthlyCount < (mission.progress_limit || 5) || claimed_count_month >= (mission.limit_per_month || 1)) {
             return res.status(400).json({ error: 'B·∫°n ch∆∞a ho√†n th√†nh ƒë·ªß s·ªë l∆∞·ª£ng ƒë√°nh gi√° th√°ng ho·∫∑c ƒë√£ nh·∫≠n th∆∞·ªüng r·ªìi.' });
        }
    } else {
        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát c·ªßa nhi·ªám v·ª• (v√≠ d·ª•: ƒëƒÉng nh·∫≠p ƒë·ªß 10 ng√†y)
        const is_eligible_by_mission_check = await mission.check(user);
        if (!is_eligible_by_mission_check) {
            return res.status(400).json({ error: 'B·∫°n ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ nh·∫≠n th∆∞·ªüng nhi·ªám v·ª• n√†y.' });
        }
    }
    // ----------------------------------------------------------------------------------

    // C·ªông ƒëi·ªÉm v√† l∆∞u l·ªãch s·ª≠ nhi·ªám v·ª•
    user.total_points += mission.points;
    user.missions.push({ mission_key: mission.key, date: new Date(), points: mission.points });
    await user.save();

    res.json({ message: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${mission.points} ƒëi·ªÉm t·ª´ nhi·ªám v·ª• "${mission.name}".`, total_points: user.total_points });
});

// === API: ƒê·ªîI ƒêI·ªÇM L·∫§Y VOUCHER ===
app.post('/redeem', async (req, res) => {
    const { phone, points } = req.body;

    if (!phone || !points || isNaN(points) || points <= 0) {
        return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin ho·∫∑c ƒëi·ªÉm kh√¥ng h·ª£p l·ªá' });
    }

    try {
        const user = await UserPoints.findOne({ phone });
        if (!user || user.total_points < points) {
            return res.status(400).json({ error: 'Kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi' });
        }

        const code = 'VOUCHER-' + crypto.randomBytes(3).toString('hex').toUpperCase();
        const discountValue = points;

        const haravanResponse = await axios.post(
            `https://${SHOP}/admin/discounts.json`,
            {
                discount: {
                    code: code,
                    discount_type: "fixed_amount",
                    value: discountValue,
                    minimum_order_amount: 0,
                    starts_at: new Date().toISOString(),
                    usage_limit: 1,
                    customer_selection: "prerequisite",
                    prerequisite_customer_emails: [user.email]
                }
            },
            {
                headers: {
                    Authorization: `Bearer ${ACCESS_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        user.total_points -= points;
        user.history.push({
            order_id: `REDEEM-${code}`,
            earned_points: -points,
            timestamp: new Date(),
            meta: {
                redeemed_for_voucher: code,
                value: discountValue,
            }
        });

        await user.save();

        res.json({
            message: 'üéâ ƒê·ªïi ƒëi·ªÉm th√†nh c√¥ng',
            code,
            value: `${discountValue}ƒë`,
            haravan_discount: haravanResponse.data.discount
        });
    } catch (err) {
        console.error('‚ùå L·ªói ƒë·ªïi ƒëi·ªÉm:', err.response?.data || err.message);
        res.status(500).json({ error: 'Kh√¥ng t·∫°o ƒë∆∞·ª£c voucher' });
    }
});

// === API: ƒêI·ªÄU CH·ªàNH ƒêI·ªÇM (CHO ADMIN) ===
app.post('/points/adjust', async (req, res) => {
    const { phone, points_to_adjust, reason, admin_user } = req.body;

    if (!phone || points_to_adjust === undefined || isNaN(points_to_adjust)) {
        return res.status(400).json({ error: 'Th√¥ng tin kh√¥ng h·ª£p l·ªá.' });
    }

    try {
        const user = await UserPoints.findOne({ phone });
        if (!user) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }

        user.total_points += points_to_adjust;

        const historyEntry = {
            order_id: `ADJUST-${Date.now()}`,
            earned_points: points_to_adjust,
            timestamp: new Date(),
            meta: {
                reason: reason || 'ƒêi·ªÅu ch·ªânh b·ªüi admin',
                admin_user: admin_user || 'Kh√¥ng r√µ'
            }
        };

        user.history.push(historyEntry);
        await user.save();

        res.json({
            message: 'C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng!',
            new_total_points: user.total_points,
            history_entry: historyEntry
        });

    } catch (err) {
        res.status(500).json({ error: 'L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm.' });
    }
});

// === START SERVER ===
app.listen(PORT, () => {
    console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
